class ProductTest
	operations
		private assertTrue: bool ==> ()
    assertTrue(cond) == return
    pre cond;
    
		private testConstructor()==
		(
			dcl cat:Category := new Category("office");
			dcl p:Product := new Product("pencil", "black pencil", cat);
			assertTrue(p.getName() = "pencil");
			assertTrue(p.getDescription() = "black pencil");
			assertTrue(p.getCategory() = cat);
			assertTrue(p in set cat.getProducts());
		);
		
		private testSimpleSetters()==
		(
			dcl p:Product := emptyProduct();
			p.setName("name");
			p.setDescription("desc");
			assertTrue(p.getName() = "name");
			assertTrue(p.getDescription() = "desc");
		);
		
		private testSetCategory()==
		(
			dcl cat1:Category := new Category("office");
			dcl p:Product := new Product("", "", cat1);
			dcl cat2:Category := new Category("space");
			assertTrue(p in set cat1.getProducts());
			assertTrue(p not in set cat2.getProducts());
			p.setCategory(cat2);
			assertTrue(p not in set cat1.getProducts());
			assertTrue(p in set cat2.getProducts());
		);
		
		private testImages()==
		(
			dcl p:Product := emptyProduct();
			p.setImageUrls(["abc"]);
			assertTrue("abc" in set elems p.getImageUrls());
		);
		
		public static emptyProduct() res: Product==
		(
			dcl cat:Category := new Category("");
			return new Product("", "", cat);
		); 
		
		public static main()==
    (
			dcl p:ProductTest := new ProductTest();
			p.testConstructor();
			p.testSetCategory();
			p.testSimpleSetters();
			p.testImages();
    );
	    
end ProductTest