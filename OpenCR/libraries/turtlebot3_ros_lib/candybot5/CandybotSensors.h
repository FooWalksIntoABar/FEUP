// Generated by gencpp from file candybot5/CandybotSensors.msg
// DO NOT EDIT!


#ifndef CANDYBOT5_MESSAGE_CANDYBOTSENSORS_H
#define CANDYBOT5_MESSAGE_CANDYBOTSENSORS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace candybot5
{
template <class ContainerAllocator>
struct CandybotSensors_
{
  typedef CandybotSensors_<ContainerAllocator> Type;

  CandybotSensors_()
    : infrared_left(0.0)
    , infrared_right(0.0)
    , ultrasound_left(0.0)
    , ultrasound_right(0.0)  {
    }
  CandybotSensors_(const ContainerAllocator& _alloc)
    : infrared_left(0.0)
    , infrared_right(0.0)
    , ultrasound_left(0.0)
    , ultrasound_right(0.0)  {
  (void)_alloc;
    }



   typedef float _infrared_left_type;
  _infrared_left_type infrared_left;

   typedef float _infrared_right_type;
  _infrared_right_type infrared_right;

   typedef float _ultrasound_left_type;
  _ultrasound_left_type ultrasound_left;

   typedef float _ultrasound_right_type;
  _ultrasound_right_type ultrasound_right;





  typedef boost::shared_ptr< ::candybot5::CandybotSensors_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::candybot5::CandybotSensors_<ContainerAllocator> const> ConstPtr;

}; // struct CandybotSensors_

typedef ::candybot5::CandybotSensors_<std::allocator<void> > CandybotSensors;

typedef boost::shared_ptr< ::candybot5::CandybotSensors > CandybotSensorsPtr;
typedef boost::shared_ptr< ::candybot5::CandybotSensors const> CandybotSensorsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::candybot5::CandybotSensors_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::candybot5::CandybotSensors_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace candybot5

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'candybot5': ['/home/afonso/catkin_ws/src/candybot5/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::candybot5::CandybotSensors_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::candybot5::CandybotSensors_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::candybot5::CandybotSensors_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::candybot5::CandybotSensors_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::candybot5::CandybotSensors_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::candybot5::CandybotSensors_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::candybot5::CandybotSensors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8f24721a2db2ab1d0dc60960be3e6042";
  }

  static const char* value(const ::candybot5::CandybotSensors_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8f24721a2db2ab1dULL;
  static const uint64_t static_value2 = 0x0dc60960be3e6042ULL;
};

template<class ContainerAllocator>
struct DataType< ::candybot5::CandybotSensors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "candybot5/CandybotSensors";
  }

  static const char* value(const ::candybot5::CandybotSensors_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::candybot5::CandybotSensors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 infrared_left\n\
float32 infrared_right\n\
float32 ultrasound_left\n\
float32 ultrasound_right\n\
\n\
\n\
";
  }

  static const char* value(const ::candybot5::CandybotSensors_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::candybot5::CandybotSensors_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.infrared_left);
      stream.next(m.infrared_right);
      stream.next(m.ultrasound_left);
      stream.next(m.ultrasound_right);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CandybotSensors_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::candybot5::CandybotSensors_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::candybot5::CandybotSensors_<ContainerAllocator>& v)
  {
    s << indent << "infrared_left: ";
    Printer<float>::stream(s, indent + "  ", v.infrared_left);
    s << indent << "infrared_right: ";
    Printer<float>::stream(s, indent + "  ", v.infrared_right);
    s << indent << "ultrasound_left: ";
    Printer<float>::stream(s, indent + "  ", v.ultrasound_left);
    s << indent << "ultrasound_right: ";
    Printer<float>::stream(s, indent + "  ", v.ultrasound_right);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CANDYBOT5_MESSAGE_CANDYBOTSENSORS_H
