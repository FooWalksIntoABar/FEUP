class ProductTest
	operations
		private assertTrue: bool ==> ()
    assertTrue(cond) == return
    pre cond;
    
		private testConstructor()==
		(
		  -- Normal scenario for creating and listing products,
	    -- as described in section 2.1 of the report, covering requirement R07 and R09.
			dcl cat:Category := new Category("office");
			dcl c: Company := new Company("Asus", "", "", "");
			dcl b:Brand := new Brand("compaq", c);
			dcl p:Product := new Product("pencil", "black pencil", cat, b);
			assertTrue(p.getName() = "pencil");
			assertTrue(p.getDescription() = "black pencil");
			assertTrue(p.getCategory() = cat);
			assertTrue(p in set cat.getProducts());
			assertTrue(b = p.getBrand());
			assertTrue(not p.hasReviews());
		);
		
		private testSimpleSetters()==
		(
			dcl p:Product := emptyProduct();
			p.setName("name");
			p.setDescription("desc");
			assertTrue(p.getName() = "name");
			assertTrue(p.getDescription() = "desc");
		);
		
		private testSetCategory()==
		(
			dcl cat1:Category := new Category("office");
			dcl p:Product := buildProductWithCategory(cat1);
			dcl cat2:Category := new Category("space");
			assertTrue(p in set cat1.getProducts());
			assertTrue(p not in set cat2.getProducts());
			p.setCategory(cat2);
			assertTrue(p not in set cat1.getProducts());
			assertTrue(p in set cat2.getProducts());
		);
		
		private testImages()==
		(
			dcl p:Product := emptyProduct();
			p.setImageUrls(["abc"]);
			assertTrue("abc" in set elems p.getImageUrls());
		);
		
		private testReviews()==
		(
			dcl p:Product := emptyProduct();
			dcl usr: User := UserTest`buildInstance();
			dcl r1: Review := new Review(usr, p, 2, "1");
			dcl r2: Review := new Review(usr, p, 5, "2");
			dcl r3: Review := new Review(usr, p, 5, "3");
			
			assertTrue(p.hasReviews());
			assertTrue(p.reviewAverage() = 4.0);
		);
		
		public static buildBrandInstance() res: Brand==
		(
			dcl c:Company := new Company("","","","");
			return new Brand("", c);
		);
		
		public static buildProductWithCategory(cat: Category) res: Product==
		(
			dcl b: Brand := buildBrandInstance();
			return new Product("", "", cat, b);
		);
		
		public static emptyProduct() res: Product==(
			return buildProductWithCategory(new Category(""))
		); 
		
		public static main()==
    (
			dcl p:ProductTest := new ProductTest();
			p.testConstructor();
			p.testSetCategory();
			p.testSimpleSetters();
			p.testImages();
			p.testReviews();
    );
	    
end ProductTest