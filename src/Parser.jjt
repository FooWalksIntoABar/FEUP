options
{
  LOOKAHEAD = 1;
  DEBUG_PARSER = false;
  MULTI = true;
}

PARSER_BEGIN(Parser)
// Java Code to invoke the parser


import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.regex.Pattern;

public class Parser {
    public static void main(String args[]) throws ParseException, FileNotFoundException {

        if(args.length != 1 || !Pattern.matches(".*\\.yal$", args[0])){
            System.out.println("Usage: java Parser <file.yal>");
            System.exit(-1);
        }

        Parser parser = new Parser(new FileInputStream(args[0]));
        try{
            SimpleNode root = parser.Module();
            root.dump("");
            }
        catch (Exception e){
            e.printStackTrace(System.out);
        }

        System.out.println(".yal file parsed successfully");
    }
}
PARSER_END(Parser)
SKIP :
{
" "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
| <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

// reserved words (Terminals)
TOKEN :
{
<RELA_OP: ">" | "<" | "<=" | ">=" | "==" | "!=">
| <ADDSUB_OP: "+" | "-">
| <ARITH_OP: "*" | "/" | "<<" | ">>" | ">>>">
| <BITWISE_OP: "&" | "|" | "^">
| <NOT_OP: "!">
| <WHILE: "while">
| <IF: "if">
| <ELSE: "else">
| <ASSIGN: "=">
| <ASPA: "\"">
| <LPAR: "(">
| <RPAR: ")">
| <VIRG: ",">
| <PVIRG: ";">
| <LCHAVETA: "{">
| <RCHAVETA: "}">
| <FUNCTION: "function">
| <MODULE: "module">
| <SIZE: "size">
}

TOKEN :
{
<INTEGER: (<DIGIT>)+>
| <ID: <LETTER> (<LETTER> | <DIGIT>)*>
| <#LETTER: ["$","A"-"Z","_","a"-"z"]>
| <#DIGIT: ["0"-"9"]>
| <STRING: "\"" (["a"-"z","A"-"Z","0"-"9",":"," ","="])+ "\"">
}


// Production Definition (Non - Terminals)

JAVACODE
void error_skipto(int kind, String msg) {
  ParseException e = generateParseException();  // generate the exception object.
  System.out.println(msg + " - " + e.toString());  // print the error message
  Token t;
  do {
    t = getNextToken();
  } while (t.kind != kind);
}


SimpleNode Module() #MODULE : {Token t;}
{
    try{
     <MODULE> t = <ID> {jjtThis.value = t.image;} <LCHAVETA> (Declaration())* (Function())* <RCHAVETA>
     }
     catch(ParseException e){
        error_skipto(RCHAVETA, "Module");
     }
     { return jjtThis; }
}

void Declaration(): {}
{
  (Element()) (<ASSIGN> ( ArrayDeclaration() | ScalarDeclaration()))? <PVIRG>
}

void Element() #ELEMENT: {Token t1;}
{
  t1 = <ID> {jjtThis.value = t1.image;} (ArrayElement())?
}

void ArrayElement() #ARR_ELEM: {}
{
  "[" "]"
}

void ScalarDeclaration() #SCAL_DECL: {Token t;}
{
  t = (<ADDSUB_OP>)? <INTEGER> {jjtThis.value = t.image;}
}

void ArrayDeclaration() #ARR_DECL: {}
{
  ( "[" ArraySize() "]" ) 
}


//É melhor arranjar a Function(), pk ficou mto partida e depois a AST pode ficar um bocado má

void Function() #FUNCT: {}
{
  <FUNCTION> <ID> (FunctionAssign())? FunctionDeclaration() FunctionContent()
}


void FunctionAssign() #FUNCT_ASSI: {}
{
    (ArrayElement())? <ASSIGN> <ID>
}

void FunctionDeclaration() #FUNCT_DECL: {}
{
     <LPAR> (Varlist())? <RPAR>

}

void FunctionContent() #FUNCT_CONT:{}
{
    <LCHAVETA> Stmtlst()
}

void Varlist() #VAR_LIST: {}
{
  (Element()) (<VIRG> (Element()))*
}

void Stmtlst() #STMT_LIST: {}
{
  (Stmt())* <RCHAVETA>
}

void Stmt() #STMT: {}
{
  While() | If() | LOOKAHEAD(3) Assign() | Call() <PVIRG>
}

void Assign() #ASSI: {}
{
  Lhs() <ASSIGN> Rhs() <PVIRG>
}

void Lhs() #void: {}
{
    Access()
}

void Rhs() #void: {}
{
    ( Term() ( ( <ARITH_OP> | <BITWISE_OP> | <ADDSUB_OP> ) Term() )? ) | "[" ArraySize() "]"
}

void ArrayAccess() #ARR_ACC: {}
{
  "[" Index() "]"
}

void ScalarAccess() #SCA_ACC: {}
{
  <ID> ("." <SIZE>)?
}

void Access() #ACC: {}
{
   <ID> (("[" Index() "]") | ("." <SIZE>)?)
}

void Index() #IND: {}
{
    <ID> | <INTEGER>
}

void Term() #TERM: {}
{
    (<ADDSUB_OP>)? (<INTEGER> |  LOOKAHEAD(3) Call() | Access())
}

void ArraySize() #ARR_SIZE: {}
{
    ScalarAccess() | <INTEGER>
}

void Call() #CALL:{}
{
  <ID> ("." <ID>)? <LPAR> (ArgumentList())? <RPAR>
}

void ArgumentList() #ARG_LIST:{}
{
  Argument() (<VIRG> Argument())*
}

void Argument() #ARG:{}
{
    ( <ID> | <STRING> | <INTEGER> )
}

void While() #WHILE:{}
{
  <WHILE> Exprtest() <LCHAVETA> Stmtlst()
}

void Exprtest() #EXPR_TEST:{}
{
  <LPAR> Lhs() <RELA_OP> Rhs() <RPAR>
}

void If() #IF:{}
{
  <IF> Exprtest() <LCHAVETA> Stmtlst() (<ELSE> <LCHAVETA> Stmtlst())?
}
